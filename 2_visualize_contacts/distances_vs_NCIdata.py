import configparser
import os
import re
import pandas as pd
import mdtraj as md
import matplotlib.pyplot as plt

# Set Matplotlib's global font to Arial
plt.rcParams['font.family'] = 'Arial'
plt.rcParams['mathtext.fontset'] = 'dejavusans'

# If we are interested in only getting the data for one case then use target_filename
target_filename = "NTL9-1-EE_unfolding_event_1_04ILE_vs_37ILE_densities.csv"

# Extract settings from ./relevant_data.txt
config = configparser.ConfigParser()
config.read('./relevant_data.txt')
try:
    header = config.get('Settings', 'header')
    trajectory_file = config.get('Settings', 'trajectory_file')
    topology_file = config.get('Settings', 'topology_file')
    start_frame = config.getint('Settings', 'Start Frame')
    end_frame = config.getint('Settings', 'End Frame')
    waters_in_traj = config.getboolean('Settings', 'waters_in_traj', fallback=False)
    case_study = config.get('Settings', 'case_study', fallback='split_transition')
except configparser.NoOptionError as e:
    raise ValueError(f"Missing setting: {e}")
except ValueError as e:
    raise ValueError(f"Invalid value: {e}")

# Fisrtly we load the trajectory from which we take the distances
PDB_top = md.load(topology_file, standard_names=False).topology
traj = md.load(trajectory_file, top=PDB_top, standard_names=False)

# Calculate distances between all residues using mdtraj
closest_atom_distances, residue_pairs = md.compute_contacts(traj, contacts='all', scheme='closest-heavy')
res_pair_list = residue_pairs.tolist() #Use the list of contacts generated by mdtraj to index residues later on 

# Then we generate a dictionary to relate the residue indexes in the distances and the labels in the csv file names
prot_indexes = PDB_top.select('protein')
n_residues = traj.atom_slice(prot_indexes).n_residues
residue_dict = {i: str(PDB_top.residue(i))[3:].zfill(len(str(n_residues-1))) + str(PDB_top.residue(i))[:3] for i in range(n_residues)}
index_dict = {residue_dict[i]: i for i in range(n_residues)}
if waters_in_traj == True:
    residue_dict[n_residues] = 'WATERS'
    index_dict['WATERS'] = n_residues
    n_residues += 1

# Then we go file by file in the NCI_csvs directory to generate plots based on their data
for filename in os.listdir('NCI_csvs'):
    if not filename.endswith('.csv'):
        continue
    # If target_filename is set, skip other files
    if target_filename and filename != target_filename:
        continue

    # We read the NCI data from the csv using pandas
    df = pd.read_csv(os.path.join('NCI_csvs',filename), encoding='latin1', delimiter=',', skipinitialspace=True)
    residue_match = re.search(r'([^_]+)_vs_([^_]+)', filename)
    res_label1, res_label2 = residue_match.group(1), residue_match.group(2)
    res_index1, res_index2 = index_dict[res_label1], index_dict[res_label2]
    # We use the labels to get the indexes of each residues, and from there the index of its distances in closest_atom_distances
    res_pair_index = res_pair_list.index([res_index1, res_index2])
    print(res_pair_list[res_pair_index], filename)

    # Start the plotting
    fig, ax1 = plt.subplots(figsize=(12.2, 4.5))
    ax1.plot(range(start_frame, end_frame+1), closest_atom_distances[:, res_pair_index], linewidth=2
             , label='Inter-residue closest heavy atom distance', color='darkgray')
    # We start setting the frame vs distance plot
    ax1.set_xlabel('Frame', fontsize=24)
    ax1.set_ylabel('Distance (nm)', fontsize = 24)

    ax1.set_xlim(df['Frame'].iloc[4], df['Frame'].iloc[-5])
    #ax1.set_ylim(0, 2.0) #limits set for better plotting of our system
    
    # Plot densities on the left y-axis
    ax2 = ax1.twinx()
    ax2.plot(df['Frame'], df['SG Attractive n^1'], linewidth=2, label=r'$\int \rho_{\text{attractive}}$', color='blue')
    ax2.plot(df['Frame'], df['SG VdW n^1'],        linewidth=2, label=r'$\int \rho_{\text{vdW}}$', color='green')
    ax2.plot(df['Frame'], df['SG Repulsive n^1'],  linewidth=2, label=r'$\int \rho_{\text{repulsive}}$', color='red')

    ax2.set_ylabel(r'Inter-residue NCI $\int \rho$', fontsize = 24)
    #ax2.set_ylim(0, 0.8) #limits set for better plotting of our system

    # Set axis ticks amd legends
    ax1.tick_params(axis='both', labelsize=22)
    ax2.tick_params(axis='both', labelsize=22)
    ax1.legend(loc='upper left', fontsize=22, bbox_to_anchor=(-0.01, 1.025))
    ax2.legend(loc='upper right', fontsize=22, bbox_to_anchor=(1.01, 1.025))

    # Create a secondary y-axis for distances
    #plt.title(f'Densities and Distance for {res_label1} vs {res_label2}')
    plt.savefig(os.path.join('NCI_csvs',f'NCIdata_and_distances_{res_label1}_vs_{res_label2}.png'), dpi=300, bbox_inches='tight')
    plt.close()